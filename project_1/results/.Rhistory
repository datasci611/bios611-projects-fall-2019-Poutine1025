title="Food Pounds vs Clothing Items")
#subset1
UMD_subset1=UMD_selected %>%
group_by(CFN) %>%
summarize(number=round(mean(number)), food=sum(food), clothing=sum(clothing), freq=n()) %>%
mutate(food_mean=food/freq, clothing_mean=clothing/freq)
#number vs food_mean
ggplot(data=UMD_subset1,aes(x=number, y=food_mean)) +
theme_linedraw() +
geom_point() +
geom_smooth(method = "lm", se = TRUE) +
labs(x="Food Provided for",
y="Average Food Pounds",
title = "Average Food Pounds vs Food Provided for")
#number vs food_mean
ggplot(data=UMD_subset1,aes(x=number, y=food_mean)) +
theme_linedraw() +
geom_point() +
geom_smooth(method = "lm", se = TRUE) +
labs(x="Number of people per family per family",
y="Average Food Pounds",
title = "Average Food Pounds vs Number of people per family")
#number vs food_mean
ggplot(data=UMD_subset1,aes(x=number, y=food_mean)) +
theme_linedraw() +
geom_point() +
geom_smooth(method = "lm", se = TRUE) +
labs(x="Number of people per family",
y="Average Food Pounds",
title = "Average Food Pounds vs Number of people per family")
#number vs food_mean
ggplot(data=UMD_subset1,aes(x=number, y=food_mean)) +
theme_linedraw() +
geom_boxplot() +
labs(x="Number of people per family",
y="Average Food Pounds",
title = "Average Food Pounds vs Number of people per family")
#food vs clothing
ggplot(data=UMD_subset1,aes(x=food, y=clothing)) +
theme_linedraw() +
geom_point() +
geom_smooth(aes(colour="gam")) +
geom_smooth(method = "lm", aes(colour="lm")) +
labs(x="Food Pounds",
y="Clothing Items",
title="Clothing Items vs Food Pounds")
#subset2
UMD_subset2=UMD_selected %>%
mutate(Date=as.Date(Date, format="%m/%d/%Y")) %>%
mutate(year=year(Date), month=month(Date), day=day(Date)) %>%
mutate(month=as.factor(month), day=as.factor(day)) %>%
filter((year>2004) & (year<2019))
#bar chart of year
ggplot(data=UMD_subset2,aes(year)) +
geom_bar(aes(fill=month)) +
labs(x="Year",
title = "Bar chart of Year")
ggplot(data = UMD_subset2, aes(x=month, y=clothing)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 1) +
labs(x="Month",
y="Clothing Items",
title = "Boxplot of Month and Clothing Items")
ggplot(data = UMD_subset2, aes(x=month, y=food)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 1) +
labs(x="Month",
y="Clothing Items",
title = "Boxplot of Month and Food Pounds")
#number vs food_mean
ggplot(data=UMD_subset1,aes(x=as.factor(number), y=food_mean)) +
theme_linedraw() +
geom_boxplot() +
labs(x="Number of people per family",
y="Average Food Pounds",
title = "Average Food Pounds vs Number of people per family")
#food vs clothing
ggplot(data=UMD_subset1,aes(x=food, y=clothing)) +
theme_linedraw() +
geom_point() +
#geom_smooth(aes(colour="gam")) +
geom_smooth(method = "lm", aes(colour="lm")) +
labs(x="Food Pounds",
y="Clothing Items",
title="Clothing Items vs Food Pounds")
#food vs clothing
ggplot(data=UMD_subset1,aes(x=food, y=clothing)) +
theme_linedraw() +
geom_point() +
#geom_smooth(aes(colour="gam")) +
geom_smooth(method = "lm") +
labs(x="Food Pounds",
y="Clothing Items",
title="Clothing Items vs Food Pounds")
View(UMD_subset2)
#bar chart of year
ggplot(data=UMD_subset2,aes(year)) +
geom_bar(aes(fill=month)) +
labs(x="Year",
title = "Bar chart of Year")
View(UMD_subset2)
range(UMD_subset2$year)
#bar chart of year
ggplot(data=UMD_subset2,aes(year)) +
geom_bar(aes(fill=month)) +
labs(x="Year",
title = "The amount of transactions from 2005-2018")
#bar chart of year
ggplot(data=UMD_subset2,aes(year)) +
geom_bar(aes(fill=month)) +
labs(x="Year",
title = "The number of transactions from 2005-2018")
#bar chart of year
ggplot(data=UMD_subset2,aes(year)) +
geom_bar(aes(fill=month)) +
labs(x="Year",
title = "The number of transactions from 2005 to 2018")
#bar chart of year
ggplot(data=UMD_subset2,aes(year)) +
geom_bar(aes(fill=month)) +
labs(x="Year",
title = "The number of transactions from 2005 to 2018")
#number vs food_mean
ggplot(data=UMD_subset1,aes(x=as.factor(number), y=food_mean)) +
theme_linedraw() +
geom_boxplot() +
labs(x="Number of people per family",
y="Average Food Pounds",
title = "Average Food Pounds of different sizes of family")
ggplot(data = UMD_subset2, aes(x=month, y=clothing)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 1) +
labs(x="Month",
y="Clothing Items",
title = "Number of clothing items of different months")
ggplot(data = UMD_subset2, aes(x=month, y=food)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 1) +
labs(x="Month",
y="Food Pounds",
title = "Amount of food of different months")
ggplot(data = UMD_subset2, aes(x=month, y=clothing)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 1) +
labs(x="Month",
y="Clothing Items",
title = "Number of clothing items for different months")
ggplot(data = UMD_subset2, aes(x=month, y=food)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 1) +
labs(x="Month",
y="Food Pounds",
title = "Amount of food for different months")
#subset3
UMD_subset3=UMD_subset2 %>%
group_by(year) %>%
summarize(food=sum(food), clothing=sum(clothing), number=sum(number), freq=n())
ggplot(data = UMD_subset3, aes(x=year, y=food)) +
geom_point() +
geom_smooth(method = "lm") +
labs(x="Year",
y="Food Pounds",
title="Food Pounds vs Year from 2005 to 2018")
#subset3
UMD_subset3=UMD_subset2 %>%
group_by(year) %>%
summarize(food=sum(food), clothing=sum(clothing), number=sum(number), freq=n())
ggplot(data = UMD_subset3, aes(x=year, y=food)) +
geom_point() +
geom_smooth(method = "lm") +
labs(x="Year",
y="Food Pounds",
title="Food Pounds from 2005 to 2018")
model_FoodvsYear=lm(food~year, data = UMD_subset3)
Food2019=predict(model_FoodvsYear, newdata = data.frame(year=2019))
print(paste("The predicted value of Food Pounds of 2019 is", Food2019))
model_FoodvsYear
10849*2019-21747332
View(UMD_subset3)
#number vs food_mean
ggplot(data=UMD_subset1,aes(x=as.factor(number), y=food_mean)) +
theme_linedraw() +
geom_boxplot() +
labs(x="Number of people per family",
y="Average Food Pounds",
title = "Average Food Pounds for different sizes of family")
View(UMD_subset1)
22*19/33/13
log(22*19/33/13)
OR=22*19/(33*13)
v=1/22+1/19+1/33+1/13
OR*exp(pnorm(0.975)*sqrt(v))
OR*exp(-pnorm(0.975)*sqrt(v))
OR^(pnorm(0.975)*sqrt(v))
OR^(-pnorm(0.975)*sqrt(v))
pnorm(0.975)
qnorm(0.975)
OR*exp(qnorm(0.975)*sqrt(v))
OR*exp(-qnorm(0.975)*sqrt(v))
OR=27*15/(7*18)
v=1/27+1/15+1/7+1/18
OR*exp(qnorm(0.975)*sqrt(v))
OR*exp(-qnorm(0.975)*sqrt(v))
v=1/27+1/15+1/7+1/18
OR*exp(qnorm(0.975)*sqrt(v))
OR*exp(-qnorm(0.975)*sqrt(v))
n11=22
n12=13
n21=33
n22=19
n=n11+n12+n21+n22
v=35*52*55*32/(n^2*(n-1))
m11=35*55/n
Q=(n11-m11)^2/v
Qp=n/(n-1)*Q
1-pchisq(0.003)
1-pchisq(0.003,1)
1-pchisq(0.0033,1)
n11=22
n12=13
n21=33
n22=19
n=n11+n12+n21+n22
v=35*52*55*32/(n^2*(n-1))
m11=35*55/n
n11b=27
n12b=7
n21b=18
n22b=15
nb=n11b+n12b+n21b+n22b
vb=34*33*45*22/(nb^2*(nb-1))
m11b=34*45/nb
QMH=(n11+n11b-m11-m11b)^2/(v+vb)
m11+m11b
80-(m11+m11b)
69-(m11+m11b)
Phi=(22*19/87+27*15/67)/(13*33/87+7*18/67)
77*7/51/31
exp(-0.9279)
exp(-0.9279+qnorm(0.975)*0.3336)
exp(-0.9279-qnorm(0.975)*0.3336)
exp(-0.7455)
exp(-0.7455-0.3306)
sqrt(2.7)
library(shiny); runApp('~/Documents/GitHub/datasci611/scripts/city_shiny_app.R')
runApp('~/Documents/GitHub/datasci611/scripts/city_shiny_app.R')
3exp(-1.96*0.8983)
3*exp(-1.96*0.8983)
exp(-qnorm(0.995)*0.4472)
exp(+qnorm(0.995)*0.4472)
0.333*exp(-qnorm(0.995)*0.4511)
0.333*exp(qnorm(0.995)*0.4511)
3*exp(qnorm(0.995)*0.4511)
3*exp(-qnorm(0.995)*0.4511)
exp(1.0986)
?%in%
library(shiny)
library(tidyverse)
city_df = read_csv(url("https://www.chapelhillopendata.org/explore/dataset/police-incident-reports-written/download/?format=csv&refine.date_of_report=2017&timezone=America/New_York&use_labels_for_header=true"), skip=3)
View(city_df)
city_df = read_csv(url("https://www.chapelhillopendata.org/explore/dataset/police-incident-reports-written/download/?format=csv&refine.date_of_report=2017&timezone=America/New_York&use_labels_for_header=true"))
View(city_df)
?read_csv
city_df = read_csv(url("https://www.chapelhillopendata.org/explore/dataset/police-incident-reports-written/download/?format=csv&refine.date_of_report=2017&timezone=America/New_York&use_labels_for_header=true"), quote = ";")
?read_table
?read.csv
city_df = read.table(url("https://www.chapelhillopendata.org/explore/dataset/police-incident-reports-written/download/?format=csv&refine.date_of_report=2017&timezone=America/New_York&use_labels_for_header=true"), sep = ";")
View(city_df)
city_df = read_csv(url("https://www.chapelhillopendata.org/explore/dataset/police-incident-reports-written/download/?format=csv&refine.date_of_report=2017&timezone=America/New_York&use_labels_for_header=true"))
city_df[1,]
View(city_df)
city_df = read_csv(url("https://www.chapelhillopendata.org/explore/dataset/police-incident-reports-written/download/?format=csv&refine.date_of_report=2017&timezone=America/New_York&use_labels_for_header=true"), skip=5)
View(city_df)
city_df[1,]
?read_table
city_df = read_table(url("https://www.chapelhillopendata.org/explore/dataset/police-incident-reports-written/download/?format=csv&refine.date_of_report=2017&timezone=America/New_York&use_labels_for_header=true"), na = " ")
View(city_df)
city_df = read_table(url("https://www.chapelhillopendata.org/explore/dataset/police-incident-reports-written/download/?format=xls&refine.date_of_report=2017&disjunctive.offense=true&disjunctive.reported_as=true&timezone=America/New_York&use_labels_for_header=true"))
View(city_df)
?read_csv
city_df = read_csv(url("https://www.chapelhillopendata.org/explore/dataset/police-incident-reports-written/download/?format=xls&refine.date_of_report=2017&disjunctive.offense=true&disjunctive.reported_as=true&timezone=America/New_York&use_labels_for_header=true"))
city_df = read_csv(url("https://www.chapelhillopendata.org/explore/dataset/police-incident-reports-written/download/?format=xls&refine.date_of_report=2017&disjunctive.offense=true&disjunctive.reported_as=true&timezone=America/New_York&use_labels_for_header=true"), na = " ")
View(city_df)
city_df = read_csv(url("https://www.chapelhillopendata.org/explore/dataset/police-incident-reports-written/download/?format=csv&refine.date_of_report=2017&timezone=America/New_York&use_labels_for_header=true"),
na = " ")
View(city_df)
police_df = read_csv("~/Documents/GitHub/bios611-projects-fall-2019-Poutine1025/homework/police.csv")
police_df = read_csv("~/Documents/GitHub/bios611-projects-fall-2019-Poutine1025/homework/police.csv")
police_df = read_csv("~/Documents/GitHub/bios611-homework-fall-2019-Poutine1025/homework/police.csv")
police_df = read_csv("~/Documents/GitHub/bios611-homework-fall-2019-Poutine1025/homework/police.csv")
View(police_df)
police_df = read_csv("~/Documents/GitHub/bios611-homework-fall-2019-Poutine1025/homework/police.csv", sep = ";")
police_df = read.csv("~/Documents/GitHub/bios611-homework-fall-2019-Poutine1025/homework/police.csv", sep = ";")
View(police_df)
police_df = read.csv("~/Documents/GitHub/bios611-homework-fall-2019-Poutine1025/homework/police.csv", sep = ";", na = " ")
View(police_df)
police_df = read_csv("~/Documents/GitHub/bios611-homework-fall-2019-Poutine1025/homework/police.csv", sep = ";")
?police_df
?read_csv
police_df = read_delim("~/Documents/GitHub/bios611-homework-fall-2019-Poutine1025/homework/police.csv", delim = ";")
View(police_df)
police_df[3981]
police_df[3981,]
police_df = read_delim(url("https://www.chapelhillopendata.org/explore/dataset/police-incident-reports-written/download/?format=csv&refine.date_of_report=2017&timezone=America/New_York&use_labels_for_header=true"), delim = ";")
View(police_df)
View(police_df)
police_df = read_delim("~/Documents/GitHub/bios611-homework-fall-2019-Poutine1025/homework/police.csv", delim = ";")
View(police_df)
police_df[3981,18]
police_df = read_delim(url("https://www.chapelhillopendata.org/explore/dataset/police-incident-reports-written/download/?format=csv&refine.date_of_report=2017&timezone=America/New_York&use_labels_for_header=true"), delim = ";")
View(police_df)
police_df = read_delim(url("https://www.chapelhillopendata.org/explore/dataset/police-incident-reports-written/download/?format=csv&refine.date_of_report=2017&timezone=America/New_York&use_labels_for_header=true"), delim = ";", na = c("","NA"," "))
police_df = read_delim(url("https://www.chapelhillopendata.org/explore/dataset/police-incident-reports-written/download/?format=csv&refine.date_of_report=2017&timezone=America/New_York&use_labels_for_header=true"), delim = ";")
police_df = read_delim(url("https://www.chapelhillopendata.org/explore/dataset/police-incident-reports-written/download/?format=csv&refine.date_of_report=2017&timezone=America/New_York&use_labels_for_header=true"), delim = ";")
police_df = read_delim("~/Documents/GitHub/bios611-homework-fall-2019-Poutine1025/homework/police.csv", delim = ";")
View(police_df)
View(police_df)
unique(police_df$`Reported As`)
unique(police_df$Offense)
which(police_df$Offense=="Forcible")
which(police_df$`Reported As`=="Forcible")
which(police_df$Agency=="Forcible")
which(police_df=="Forcible")
police_df = read_delim(path, delim = ";") %>%
filter(Forcible=="Y" & !is.na(`Victime Age`))
load_data <- function(path){
library(tidyverse)
police_df = read_delim(path, delim = ";") %>%
filter(Forcible=="Y" & !is.na(`Victime Age`))
}
library(tidyverse)
source("hw4_helper.R")
source("~/Documents/GitHub/bios611-homework-fall-2019-Poutine1025/homework/hw4_helper.R")
police_df = load_data(path)
path="~/Documents/GitHub/bios611-homework-fall-2019-Poutine1025/homework/police.csv"
police_df = load_data(path)
police_df = read_delim(path, delim = ";") %>%
filter(Forcible=="Y" & !is.na(`Victim Age`))
load_data <- function(path){
library(tidyverse)
police_df = read_delim(path, delim = ";") %>%
filter(Forcible=="Y" & !is.na(`Victim Age`))
}
source("~/Documents/GitHub/bios611-homework-fall-2019-Poutine1025/homework/hw4_helper.R")
path="~/Documents/GitHub/bios611-homework-fall-2019-Poutine1025/homework/police.csv"
police_df = load_data(path)
View(police_df)
View(police_df)
runApp('~/Documents/GitHub/datasci611/scripts/city_shiny_app.R')
# Define UI for app that draws a histogram and a data table----
ui <- fluidPage(
# App title ----
titlePanel("police"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Integer for the number of bins ----
numericInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram and table----
plotOutput(outputId = "popPlot"),
dataTableOutput(outputId = "popTable")
)
)
)
city_df = load_data(path)
# Define UI for app that draws a histogram and a data table----
ui <- fluidPage(
# App title ----
titlePanel("police"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Integer for the number of bins ----
checkboxInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram and table----
plotOutput(outputId = "popPlot"),
dataTableOutput(outputId = "popTable")
)
)
)
?checkboxInput
?checkboxGroupInput
if (interactive()) {
ui <- fluidPage(
checkboxGroupInput("variable", "Variables to show:",
c("Cylinders" = "cyl",
"Transmission" = "am",
"Gears" = "gear")),
tableOutput("data")
)
server <- function(input, output, session) {
output$data <- renderTable({
mtcars[, c("mpg", input$variable), drop = FALSE]
}, rownames = TRUE)
}
}
shinyApp(ui, server)
runApp('~/Documents/GitHub/datasci611/scripts/city_shiny_app.R')
?selectInput
shinyApp(
ui = fluidPage(
selectInput("variable", "Variable:",
c("Cylinders" = "cyl",
"Transmission" = "am",
"Gears" = "gear")),
tableOutput("data")
),
server = function(input, output) {
output$data <- renderTable({
mtcars[, c("mpg", input$variable), drop = FALSE]
}, rownames = TRUE)
}
)
}
shinyApp(
ui = fluidPage(
selectInput("state", "Choose a state:",
list(`East Coast` = list("NY", "NJ", "CT"),
`West Coast` = list("WA", "OR", "CA"),
`Midwest` = list("MN", "WI", "IA"))
),
textOutput("result")
),
server = function(input, output) {
output$result <- renderText({
paste("You chose", input$state)
})
}
)
View(mtcars)
?geom_violin
?get
runApp('~/Documents/GitHub/bios611-homework-fall-2019-Poutine1025/homework/hw4_app.R')
runApp('~/Documents/GitHub/bios611-homework-fall-2019-Poutine1025/homework/hw4_app.R')
runApp('~/Documents/GitHub/bios611-homework-fall-2019-Poutine1025/homework/hw4_app.R')
runApp('~/Documents/GitHub/bios611-homework-fall-2019-Poutine1025/homework/hw4_app.R')
runApp('~/Documents/GitHub/bios611-homework-fall-2019-Poutine1025/homework/hw4_app.R')
?get
get("%o%")
e1 <- new.env()
View(e1)
mget(letters, e1, ifnotfound = as.list(LETTERS))
e1
ggplot(police_df, aes(x=City, y=`Victim Age`)) +
geom_violin() +
labs(x = City,
title = "Violin")
ggplot(police_df, aes(x=City, y=`Victim Age`)) +
geom_violin() +
labs(x = City,
title = "Violin")
police_df
ggplot(police_df, aes(x=City, y=`Victim Age`)) +
geom_violin() +
labs(x = "City",
title = "Violin")
runApp('~/Documents/GitHub/bios611-homework-fall-2019-Poutine1025/homework/hw4_app.R')
runApp('~/Documents/GitHub/bios611-homework-fall-2019-Poutine1025/homework/hw4_app.R')
ggplot(data, aes(x=get(Xvariable), y=`Victim Age`)) +
geom_violin() +
labs(x = Xvariable,
title = "Violin")
runApp('~/Documents/GitHub/bios611-homework-fall-2019-Poutine1025/homework/hw4_app.R')
?selectInput
getNum <- function(data, Xvariable){
return(length(unique(data$`Xvariable`)))
}
getNum(police_df, city)
getNum(police_df, "City")
getNum(police_df, City)
getNum <- function(data, Xvariable){
return(length(unique(data$Xvariable)))
}
getNum(police_df, City)
police_df$City
length(unique(data$City))
length(unique(police_df$City))
getNum <- function(data, Xvariable){
return(length(unique(data$Xvariable)))
}
getNum <- function(data, Xvariable){
return(length(unique(data$get(Xvariable))))
}
return(length(unique(data[[Xvariable]])))
getNum <- function(data, Xvariable){
return(length(unique(data[[Xvariable]])))
}
getNum(police_df, "City")
runApp('~/Documents/GitHub/bios611-homework-fall-2019-Poutine1025/homework/hw4_app.R')
runApp('~/Documents/GitHub/bios611-homework-fall-2019-Poutine1025/homework/hw4_app.R')
runApp('~/Documents/GitHub/bios611-homework-fall-2019-Poutine1025/homework/hw4_app.R')
runApp('~/Documents/GitHub/bios611-homework-fall-2019-Poutine1025/homework/hw4_app.R')
runApp('~/Documents/GitHub/bios611-homework-fall-2019-Poutine1025/homework/hw4_app.R')
runApp('~/Documents/GitHub/bios611-homework-fall-2019-Poutine1025/homework/hw4_app.R')
runApp('~/Documents/GitHub/bios611-homework-fall-2019-Poutine1025/homework/hw4_app.R')
runApp('~/Documents/GitHub/bios611-homework-fall-2019-Poutine1025/homework/hw4_app.R')
runApp('~/Documents/GitHub/bios611-homework-fall-2019-Poutine1025/homework/hw4_app.R')
runApp('~/Documents/GitHub/bios611-homework-fall-2019-Poutine1025/homework/hw4_app.R')
runApp('~/Documents/GitHub/bios611-homework-fall-2019-Poutine1025/homework/hw4_app.R')
runApp('~/Documents/GitHub/bios611-homework-fall-2019-Poutine1025/homework/hw4_app.R')
runApp('~/Documents/GitHub/bios611-homework-fall-2019-Poutine1025/homework/hw4_app.R')
runApp('~/Documents/GitHub/bios611-homework-fall-2019-Poutine1025/homework/hw4_app.R')
