setwd("~/Documents/GitHub/bios611-projects-fall-2019-Poutine1025/project_2")
source("helper_functions.R")
UMD=read_tsv("./data/UMD_Services_Provided_20190719.tsv")
View(UMD)
runApp('~/Documents/GitHub/bios611-homework-fall-2019-Poutine1025/homework/hw4_app.R')
View(UMD)
UMD=read_tsv("./data/UMD_Services_Provided_20190719.tsv")
ui <- fluidPage(
titlePanel(""),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "variable", label = "Select variables:",
choices = c("City" = "City",
"Victim Gender" = "Victim Gender",
"Victim Race" = "Victim Race")
),
textOutput(outputId = "textOutput")
),
mainPanel(
plotOutput(outputId = "popPlot")
)
)
)
?navbarPage
shinyApp(ui, server)
library(shiny)
library(tidyverse)
setwd("~/Documents/GitHub/bios611-projects-fall-2019-Poutine1025/project_2")
source("helper_functions.R")
UMD=read_tsv("./data/UMD_Services_Provided_20190719.tsv")
ui <- dashboardPage(
dashboardHeader(title = "Basic dashboard"),
dashboardSidebar(),
dashboardBody(
# Boxes need to be put in a row (or column)
fluidRow(
box(plotOutput("plot1", height = 250)),
box(
title = "Controls",
sliderInput("slider", "Number of observations:", 1, 100, 50)
)
)
)
)
server <- function(input, output) {
set.seed(122)
histdata <- rnorm(500)
output$plot1 <- renderPlot({
data <- histdata[seq_len(input$slider)]
hist(data)
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Basic dashboard"),
dashboardSidebar(),
dashboardBody(
# Boxes need to be put in a row (or column)
fluidRow(
box(plotOutput("plot1", height = 250)),
box(
title = "Controls",
sliderInput("slider", "Number of observations:", 1, 100, 50)
)
)
)
)
ui <- dashboardPage(
dashboardHeader(title = "Basic dashboard"),
dashboardSidebar(),
dashboardBody(
# Boxes need to be put in a row (or column)
fluidRow(
box(plotOutput("plot1", height = 250)),
box(
title = "Controls",
sliderInput("slider", "Number of observations:", 1, 100, 50)
)
)
)
)
server <- function(input, output) {
set.seed(122)
histdata <- rnorm(500)
output$plot1 <- renderPlot({
data <- histdata[seq_len(input$slider)]
hist(data)
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Basic dashboard"),
dashboardSidebar(),
dashboardBody(
# Boxes need to be put in a row (or column)
fluidRow(
box(plotOutput("plot1", height = 250)),
box(
title = "Controls",
sliderInput("slider", "Number of observations:", 1, 100, 50)
)
)
)
)
install.packages("shinydashboard")
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Basic dashboard"),
dashboardSidebar(),
dashboardBody(
# Boxes need to be put in a row (or column)
fluidRow(
box(plotOutput("plot1", height = 250)),
box(
title = "Controls",
sliderInput("slider", "Number of observations:", 1, 100, 50)
)
)
)
)
server <- function(input, output) {
set.seed(122)
histdata <- rnorm(500)
output$plot1 <- renderPlot({
data <- histdata[seq_len(input$slider)]
hist(data)
})
}
shinyApp(ui, server)
UMD=read_tsv("./data/UMD_Services_Provided_20190719.tsv")
ui <- navbarPage("Project 2: UMD",
fluidPage(
tabPanel("Background"),
sidebarLayout(
sidebarPanel(
"About UMD"
),
mainPanel(
textOutput(outputId = "pre0")
)
)
)
)
sever <- function(input, output){
output$pre0 <- renderText("The programs of Urban Ministries of Durham (UMD) end homelessness by providing neighbors with emergency shelter and case management to help them overcome barriers such as unemployment, medical and mental health problems, past criminal convictions and addiction.")
}
shinyApp(ui = ui, sever = sever)
UMD=read_tsv("./data/UMD_Services_Provided_20190719.tsv")
ui <- navbarPage("Project 2: UMD",
fluidPage(
tabPanel("Background"),
sidebarLayout(
sidebarPanel(
"About UMD"
),
mainPanel(
textOutput(outputId = "pre0")
)
)
)
)
server <- function(input, output){
output$pre0 <- renderText("The programs of Urban Ministries of Durham (UMD) end homelessness by providing neighbors with emergency shelter and case management to help them overcome barriers such as unemployment, medical and mental health problems, past criminal convictions and addiction.")
}
shinyApp(ui = ui, server = server)
server <- function(input, output){
output$pre0 <- renderText("The programs of Urban Ministries of Durham (UMD) end homelessness by providing neighbors with emergency shelter and case management to help them overcome barriers such as unemployment, medical and mental health problems, past criminal convictions and addiction.")
}
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Documents/GitHub/bios611-projects-fall-2019-Quanbaby/project_2')
runApp('~/Documents/GitHub/bios611-projects-fall-2019-Quanbaby/project_2')
runApp('~/Documents/GitHub/bios611-projects-fall-2019-Quanbaby/project_2')
?h3
runApp('~/Documents/GitHub/bios611-projects-fall-2019-Quanbaby/project_2')
?checkboxGroupInput
ui <- fluidPage(
checkboxGroupInput("variable", "Variables to show:",
c("Cylinders" = "cyl",
"Transmission" = "am",
"Gears" = "gear")),
tableOutput("data")
)
server <- function(input, output, session) {
output$data <- renderTable({
mtcars[, c("mpg", input$variable), drop = FALSE]
}, rownames = TRUE)
}
shinyApp(ui, server)
server <- function(input, output, session) {
output$data <- renderTable({
mtcars[, c("mpg", input$variable), drop = FALSE]
}, rownames = TRUE)
}
ui <- fluidPage(
checkboxGroupInput("variable", "Variables to show:",
c("Cylinders" = "cyl",
"Transmission" = "am",
"Gears" = "gear")),
tableOutput("data")
)
server <- function(input, output, session) {
output$data <- renderTable({
mtcars[, c("mpg", input$variable), drop = FALSE]
}, rownames = TRUE)
}
shinyApp(ui, server)
?radioButtons
clean_data <- function(data){
data_selected=data %>%
select(`Date`, `Client File Number`, `Food Pounds`, `Clothing Items`, `Food Provided for`) %>%
rename(CFN=`Client File Number`, food=`Food Pounds`, clothing=`Clothing Items`, number=`Food Provided for`) %>%
drop_na()
return(data_selected)
}
UMD_selected=clean_data(UMD)
View(UMD_selected)
View(UMD_selected)
runApp()
runApp()
runApp()
runApp()
runApp('~/Documents/GitHub/bios611-projects-fall-2019-Quanbaby/project_2')
runApp()
Vrelation <- fucntion(data, XV, YV){
ggplot(data,aes(x=get(XV), y=get(YV))) +
geom_point() +
geom_smooth() +
labs(x=XV,
y=YV,
title = paste(YV, " vs ", XV))
}
Vrelation <- fucntion(data, XV, YV){
ggplot(data,aes(x=get(XV), y=get(YV))) +
geom_point() +
geom_smooth() +
labs(x=XV,
y=YV,
title = paste(YV, " vs ", XV))
}
Vrelation <- fucntion(data, XV, YV){
ggplot(data,aes(x=get(XV), y=get(YV))) +
geom_point() +
geom_smooth() +
labs(x=XV,
y=YV,
title = paste(YV, " vs ", XV))
}
Vrelation <- fucntion(data, XV, YV){
ggplot(data,aes(x=get(XV), y=get(YV))) +
geom_point() +
geom_smooth() +
labs(x=XV,
y=YV,
title = paste(YV, " vs ", XV))
}
Vrelation <- fucntion(data, XV, YV){}
Vrelation <- fucntion(data, XV, YV){}
Vrelation <- fucntion(data, XV, YV){}
Vrelation <- fucntion(data, XV, YV){
ggplot(data,aes(x=get(XV), y=get(YV))) +
geom_point() +
geom_smooth() +
labs(x=XV,
y=YV,
title = paste(YV, " vs ", XV))
}
plotViolin <- function(data, Xvariable){
ggplot(data, aes(x=get(Xvariable), y=`Victim Age`)) +
geom_violin() +
labs(x = Xvariable,
title = paste("Violin plot for Victim Age and ", Xvariable))
}
plotViolin <- function(data, Xvariable, Yvariable){
ggplot(data, aes(x=get(Xvariable), y=get(Yvariable))) +
geom_point() +
labs(x = Xvariable,
y = Yvariable,
title = paste("Violin plot for Victim Age and ", Xvariable))
}
Vrelation <- function(data, Xvariable, Yvariable){
ggplot(data, aes(x=get(Xvariable), y=get(Yvariable))) +
geom_point() +
labs(x = Xvariable,
y = Yvariable,
title = paste(Yvariable, " vs ", Yvariable))
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(UMD_selected)
runApp()
runApp()
runApp()
?sliderInput
if (interactive()) {
options(device.ask.default = FALSE)
ui <- fluidPage(
sliderInput("obs", "Number of observations:",
min = 0, max = 1000, value = 500
),
plotOutput("distPlot")
)
# Server logic
server <- function(input, output) {
output$distPlot <- renderPlot({
hist(rnorm(input$obs))
})
}
# Complete app with UI and server components
shinyApp(ui, server)
}
knitr::opts_chunk$set(echo = TRUE)
#subset1
UMD_subset1=UMD_selected %>%
group_by(CFN) %>%
summarize(number=round(mean(number)), food=sum(food), clothing=sum(clothing), freq=n()) %>%
mutate(food_mean=food/freq, clothing_mean=clothing/freq)
View(UMD_subset1)
runApp()
runApp()
#subset2
UMD_subset2=UMD_selected %>%
mutate(Date=as.Date(Date, format="%m/%d/%Y")) %>%
mutate(year=year(Date), month=month(Date), day=day(Date)) %>%
mutate(month=as.factor(month), day=as.factor(day)) %>%
filter((year>2004) & (year<2019))
View(UMD_subset2)
typeof(UMD_subset2$year)
typeof(UMD_subset2$month)
runApp()
runApp()
?checkboxGroupInput
ui <- fluidPage(
checkboxGroupInput("icons", "Choose icons:",
choiceNames =
list(icon("calendar"), icon("bed"),
icon("cog"), icon("bug")),
choiceValues =
list("calendar", "bed", "cog", "bug")
),
textOutput("txt")
)
server <- function(input, output, session) {
output$txt <- renderText({
icons <- paste(input$icons, collapse = ", ")
paste("You chose", icons)
})
}
shinyApp(ui, server)
ui <- fluidPage(
checkboxGroupInput("variable", "Variables to show:",
c("Cylinders" = "cyl",
"Transmission" = "am",
"Gears" = "gear")),
tableOutput("data")
)
server <- function(input, output, session) {
output$data <- renderTable({
mtcars[, c("mpg", input$variable), drop = FALSE]
}, rownames = TRUE)
}
shinyApp(ui, server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ggplot(dataS,aes(year)) +
geom_bar(aes(fill=month)) +
labs(x="Year",
title = paste("The number of transactions from ", Y[1]," to ",Y[2]))
runApp()
runApp()
runApp()
runApp('~/Documents/GitHub/bios611-projects-fall-2019-Quanbaby/project_2')
?numericInput
if (interactive()) {
ui <- fluidPage(
numericInput("obs", "Observations:", 10, min = 1, max = 100),
verbatimTextOutput("value")
)
server <- function(input, output) {
output$value <- renderText({ input$obs })
}
shinyApp(ui, server)
}
runApp('~/Documents/GitHub/bios611-projects-fall-2019-Quanbaby/project_2')
runApp()
runApp()
View(UMD_subset2)
#subset3
UMD_subset3=UMD_subset2 %>%
group_by(year) %>%
summarize(food=sum(food), clothing=sum(clothing), number=sum(number), freq=n())
ggplot(data = UMD_subset3, aes(x=year, y=food)) +
geom_point() +
geom_smooth(method = "lm") +
labs(x="Year",
y="Food Pounds",
title="Food Pounds from 2005 to 2018")
View(UMD_subset3)
runApp()
View(UMD_subset2)
View(UMD_subset3)
View(UMD_subset3)
runApp()
runApp()
runApp()
UMD_subset3=UMD%>%
clean_data()%>%
clean_data2()%>%
clean_data2()
View(UMD_subset3)
UMD_subset3=UMD%>%
clean_data()%>%
clean_data2()%>%
clean_data3()
View(UMD_subset3)
model_FoodvsYear=lm(`Food Pounds`~Year, UMD_subset3)
Food=predict(model_FoodvsYear, newdata = data.frame(Year=Y))
Food=predict(model_FoodvsYear, newdata = data.frame(Year=2019))
dataN=UMD_subset3 %>%
mutate(Group="Old") %>%
rbind(data.frame(Year=Y, `Food Pounds`=Food, Group="New"))
dataN=UMD_subset3 %>%
mutate(Group="Old") %>%
rbind(data.frame(Year=2019, `Food Pounds`=Food, Group="New"))
dataN=UMD_subset3 %>%
mutate(Group="Old")
View(dataN)
View(dataN)
dataN=UMD_subset3 %>%
rbind(data.frame(Year=2019, `Food Pounds`=Food))
dataN=rbind(dataN, c(2019, Food, "New"))
View(dataN)
View(dataN)
runApp()
View(dataN)
ggplot(dataN, aes(x=Year, y=`Food Pounds`)) +
geom_point(aes(color=Group)) +
geom_smooth(method = "lm") +
labs(x="Year",
y="Food Pounds",
title=paste("Food amount prediction for year ", Y))
ggplot(dataN, aes(x=Year, y=`Food Pounds`)) +
geom_point(aes(color=Group)) +
geom_smooth(method = "lm") +
labs(x="Year",
y="Food Pounds",
title=paste("Food amount prediction for year ", 2019))
View(dataN)
dataN=rbind(dataN, c(2019, round(Food), "New"))
ggplot(dataN, aes(x=Year, y=`Food Pounds`)) +
geom_point(aes(color=Group)) +
geom_smooth(method = "lm") +
labs(x="Year",
y="Food Pounds",
title=paste("Food amount prediction for year ", 2019))
View(dataN)
UMD_subset3=UMD%>%
clean_data()%>%
clean_data2()%>%
clean_data3()
model_FoodvsYear=lm(`Food Pounds`~Year, UMD_subset3)
Food=predict(model_FoodvsYear, newdata = data.frame(Year=2019))
dataN=UMD_subset3 %>%
mutate(Group="Old")
dataN=rbind(dataN, c(2019, round(Food), "New"))
ggplot(dataN, aes(x=Year, y=`Food Pounds`)) +
geom_point(aes(color=Group)) +
geom_smooth(method = "lm") +
labs(x="Year",
y="Food Pounds",
title=paste("Food amount prediction for year ", 2019))
typeof(dataN$Year)
typeof(dataN$`Food Pounds`)
dataN$Year=as.numeric(dataN$Year)
dataN$`Food Pounds`=as.numeric(dataN$`Food Pounds`)
ggplot(dataN, aes(x=Year, y=`Food Pounds`)) +
geom_point(aes(color=Group)) +
geom_smooth(method = "lm") +
labs(x="Year",
y="Food Pounds",
title=paste("Food amount prediction for year ", 2019))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
UMD=read_tsv(url("https://github.com/datasci611/bios611-projects-fall-2019-Poutine1025/blob/master/project_2/data/UMD_Services_Provided_20190719.tsv"))
View(UMD)
UMD=read_tsv(url("https://raw.githubusercontent.com/biodatascience/datasci611/gh-pages/data/project1_2019/UMD_Services_Provided_20190719.tsv")
UMD=read_tsv(url("https://raw.githubusercontent.com/biodatascience/datasci611/gh-pages/data/project1_2019/UMD_Services_Provided_20190719.tsv")
)
mydata = read_tsv(url("https://raw.githubusercontent.com/biodatascience/datasci611/gh-pages/data/project1_2019/UMD_Services_Provided_20190719.tsv"))
runApp()
library(tidyverse)
client=read_csv("client.csv")
